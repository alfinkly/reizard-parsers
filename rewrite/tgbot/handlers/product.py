from aiogram import Router
from aiogram.types import CallbackQuery

from database.database import ORM

router = Router()


@router.callback_query(lambda c: c.data and c.data.startswith('category:'))
async def process_category_selection(callback: CallbackQuery, callback_data: CallbackQuery, orm: ORM):
    category_name = callback_data.data

    products = await orm.product_repo.select_site_products(1)

    message_text = f"–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n"
    message_text += "\nArbuz:\n" + "\n".join([prod['name'] for prod in await orm.product_repo.select_site_products(1)])
    message_text += "\n\nClever:\n" + "\n".join(
        [prod['name'] for prod in await orm.product_repo.select_site_products(2)])
    # message_text += "\n\nKaspi:\n" + "\n".join([prod['name'] for prod in await
    # orm.product_repo.select_site_products(3)])

    await callback.bot.send_message(callback.from_user.id, message_text)
    await callback.answer()



@router.callback_query_handler(text='share_contact')
async def prompt_for_contact(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    await bot.send_message(callback_query.from_user.id,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ -> –ö–æ–Ω—Ç–∞–∫—Ç.")
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)


@router.message_handler(content_types=['contact'], state='*')
async def contact_received(message: types.Message, state: FSMContext):
    contact = message.contact
    await db['user_contacts'].update_one(
        {'user_id': message.from_user.id},
        {'$set': {'phone_number': contact.phone_number, 'first_name': contact.first_name,
                  'last_name': contact.last_name}},
        upsert=True
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!", reply_markup=types.ReplyKeyboardRemove())

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    markup = await category_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    await ProductSearch.choosing_category.set()


async def show_products(message: types.Message, state: FSMContext, page: int = 0):
    data = await state.get_data()
    matched_products = data.get('matched_products', [])
    # sent_products —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_cache = data.get('page_cache', {})
    sent_products = data.get('sent_products', set())  # –û–±—â–∏–π –∫—ç—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    last_message_ids = data.get('last_message_ids', [])

    items_per_page = 5
    total_pages = (len(matched_products) + items_per_page - 1) // items_per_page

    if page in page_cache:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫—ç—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_products = page_cache[page]
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –Ω–µ–π
        start_index = page * items_per_page
        end_index = start_index + items_per_page
        page_products = []
        for prod in matched_products[start_index:end_index]:
            arbuz_id = prod[0]['_id'] if prod[0] else None
            klever_id = prod[1]['_id'] if prod[1] else None
            kaspi_id = prod[2]['_id'] if len(prod) > 2 and prod[2] else None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            if not any(pid in sent_products for pid in [arbuz_id, klever_id, kaspi_id]):
                page_products.append(prod)
                # –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–±—â–∏–π –∫—ç—à
                if arbuz_id: sent_products.add(arbuz_id)
                if klever_id: sent_products.add(klever_id)
                if kaspi_id: sent_products.add(kaspi_id)

        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_cache[page] = page_products

    if not page_products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞.")
        return

    for product_pair in page_products:
        arbuz_product, klever_product, kaspi_product = product_pair if len(product_pair) > 2 else (
            product_pair[0], product_pair[1], None)
        arbuz_text, klever_text, kaspi_text, image_url = format_message(arbuz_product, klever_product,
                                                                        kaspi_product)  # –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é format_message
        text = arbuz_text + "\n" + klever_text + "\n" + kaspi_text  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è "–ö–∞—Å–ø–∏–π"

        markup = InlineKeyboardMarkup(row_width=2)
        if arbuz_product and klever_product:
            product_id = arbuz_product.get('_id', klever_product.get('_id', 'unknown'))
            markup.add(
                InlineKeyboardButton("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", callback_data=f"match:{product_id}"),
                InlineKeyboardButton("–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", callback_data=f"nomatch:{product_id}")
            )

        try:
            if image_url and image_url.startswith('http'):
                sent_message = await message.bot.send_photo(chat_id=message.chat.id, photo=image_url, caption=text,
                                                            reply_markup=markup)
            else:
                raise ValueError("Invalid image URL")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            sent_message = await message.answer(text, reply_markup=markup)

        # –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        if arbuz_product:
            sent_products.add(arbuz_product['_id'])
        if klever_product:
            sent_products.add(klever_product['_id'])

        last_message_ids.append(sent_message.message_id)

    await state.update_data(page_cache=page_cache, sent_products=sent_products, last_message_ids=last_message_ids)

    navigation_markup = InlineKeyboardMarkup(row_width=2)
    if page > 0:
        navigation_markup.insert(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if page + 1 < total_pages:
        navigation_markup.insert(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"page:{page + 1}"))

    navigation_markup.insert(InlineKeyboardButton("üîç –ò–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫", switch_inline_query_current_chat=""))

    navigation_message = await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫:",
                                              reply_markup=navigation_markup)
    last_message_ids.append(navigation_message.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
    await state.update_data(page_cache=page_cache, sent_products=sent_products, last_message_ids=last_message_ids)


@router.inline_handler(state='*')
async def inline_query_handler(inline_query: types.InlineQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    current_state = await state.get_state()
    user_data = await state.get_data()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
    await state.finish()

    query = inline_query.query.strip()
    results = []

    if query:
        try:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ `name_text` –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
            projection = {'_id': True, 'name': True, 'price': True, 'image_url': True, 'link': True}
            search_results_arbuz = await arbuz_collection.find(
                {'$text': {'$search': query}},
                projection
            ).sort('name', pymongo.ASCENDING).limit(10).to_list(None)
            search_results_klever = await klever_collection.find(
                {'$text': {'$search': query}},
                projection
            ).sort('name', pymongo.ASCENDING).limit(10).to_list(None)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
            combined_results = search_results_arbuz + search_results_klever
            unique_results = {result['name']: result for result in combined_results}.values()

            for result in unique_results:
                full_url = result["link"]
                if not full_url.startswith('http'):
                    full_url = 'https://arbuz.kz' + full_url
                photo_url = result["image_url"]
                title = result['name']
                price = result['price']

                keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=full_url))

                results.append(
                    InlineQueryResultArticle(
                        id=str(result['_id']),
                        title=title,
                        input_message_content=InputTextMessageContent(
                            message_text=f"<b>{title}</b>\n–¶–µ–Ω–∞: {price}\n<a href='{full_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>",
                            parse_mode=types.ParseMode.HTML
                        ),
                        reply_markup=keyboard,
                        thumb_url=photo_url,
                        description=f"–¶–µ–Ω–∞: {price}"
                    )
                )
        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await inline_query.answer(
                results=[],
                cache_time=1,
                switch_pm_text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                switch_pm_parameter="start"
            )
            return

    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    results = results[:20]
    if current_state is not None:
        await state.set_state(current_state)
        await state.set_data(user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.answer_inline_query(inline_query.id, results=results, cache_time=1)


button_states = {}  # –ö–ª—é—á: (user_id, product_id), –ó–Ω–∞—á–µ–Ω–∏–µ: 'match' –∏–ª–∏ 'nomatch'


async def update_clicks(user_id, product_id, product_name, product_url, click_type, callback_query):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    button_states[(user_id, product_id)] = click_type

    collection = db['product_clicks']
    user_field = f"{click_type}_users"
    await collection.update_one(
        {"product_id": product_id},
        {"$set": {"product_name": product_name, "product_url": product_url},
         "$inc": {f"{click_type}_clicks": 1},
         "$addToSet": {user_field: user_id}},
        upsert=True
    )
    doc = await collection.find_one({"product_id": product_id})
    if doc:
        message = f"–¢–æ–≤–∞—Ä '{product_name}' ({product_id}) –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ {'—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' if click_type == 'match' else '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç'}. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {doc[click_type + '_clicks']}."
        await bot.send_message(ADMIN_CHAT_ID, message)
        await callback_query.message.copy_to(ADMIN_CHAT_ID)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await refresh_message_buttons(callback_query, product_id)


async def refresh_message_buttons(callback_query: types.CallbackQuery, product_id: str):
    user_id = callback_query.from_user.id
    state = button_states.get((user_id, product_id), None)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    match_button_text = "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç" if state == "match" else "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"
    nomatch_button_text = "‚úÖ –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç" if state == "nomatch" else "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"

    markup = InlineKeyboardMarkup(row_width=2)
    match_button = InlineKeyboardButton(match_button_text, callback_data=f"match:{product_id}")
    nomatch_button = InlineKeyboardButton(nomatch_button_text, callback_data=f"nomatch:{product_id}")
    markup.add(match_button, nomatch_button)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –∫–Ω–æ–ø–æ–∫
    await callback_query.message.edit_reply_markup(reply_markup=markup)


@router.callback_query_handler(lambda c: c.data.startswith("match:"), state=ProductSearch.viewing)
async def handle_match(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split(':')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
    product_name = "Product Name Placeholder"
    product_url = "http://example.com/placeholder"
    await update_clicks(callback_query.from_user.id, product_id, product_name, product_url, "match", callback_query)
    await callback_query.answer("–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä –∫–∞–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π.")


@router.callback_query_handler(lambda c: c.data.startswith('category:'), state='*')
async def process_category_selection(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category = callback_query.data.split(':')[1]
    await callback_query.answer()

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ê—Ä–±—É–∑–µ
    arbuz_products = await arbuz_collection.find({'category': category}).to_list(None)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º category_mapping –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ö–ª–µ–≤–µ—Ä–µ –∏ –ö–∞—Å–ø–∏–π
    klever_categories = category_mapping.get(category, [])
    klever_products = []
    kaspi_products = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∞—Å–ø–∏–π
    for klever_category in klever_categories:
        klever_products.extend(await klever_collection.find({'category': klever_category}).to_list(None))
        # –î–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ö–∞—Å–ø–∏–π —Ç–µ –∂–µ, —á—Ç–æ –∏ –¥–ª—è –ö–ª–µ–≤–µ—Ä. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        kaspi_products.extend(await kaspi_collection.find({'category': klever_category}).to_list(None))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫—ç—à–µ
    if category not in matched_products_cache:
        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        matched_products = await find_matching_products(arbuz_products, klever_products, kaspi_products,
                                                        category_mapping)
        matched_products_cache[category] = matched_products

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(matched_products=matched_products_cache[category])

    if matched_products_cache[category]:
        await show_products(callback_query.message, state)
    else:
        await callback_query.message.edit_text("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@router.callback_query_handler(lambda c: c.data.startswith("nomatch:"), state=ProductSearch.viewing)
async def handle_nomatch(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split(':')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
    user_id = callback_query.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ (–∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞)
    product_name = "Product Name Placeholder"
    product_url = "http://example.com/placeholder"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–∫–∞—Ö
    await update_clicks(callback_query.from_user.id, product_id, product_name, product_url, "nomatch", callback_query)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_contact = await db['user_contacts'].find_one({'user_id': user_id})
    if user_contact:
        phone_number = user_contact.get('phone_number', '–ù–æ–º–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
        first_name = user_contact.get('first_name', '–ò–º—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
        last_name = user_contact.get('last_name', '')

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}\n"
            f"ID: {user_id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
            f"–û—Ç–º–µ—Ç–∏–ª —Ç–æ–≤–∞—Ä –∫–∞–∫ '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç':\n"
            f"{product_name}\n"
            f"{product_url}"
        )
        await bot.send_message(ADMIN_CHAT_ID, admin_message)
    else:
        await bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await callback_query.answer("–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä –∫–∞–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π.")


page_storage = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query_handler(lambda c: c.data.startswith("page:"), state='*')
async def navigate_page(callback_query: types.CallbackQuery, state: FSMContext):
    page = int(callback_query.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    last_message_ids = data.get('last_message_ids', [])
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for message_id in last_message_ids:
        try:
            await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}")

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_message_ids=[])

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await show_products(callback_query.message, state, page)
    await callback_query.answer()


def generate_hash(link):
    hash_object = hashlib.md5(link.encode())
    return hash_object.hexdigest()[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è¬†—Ä–∞–∑–º–µ—Ä–∞


def format_message(arbuz_product=None, klever_product=None, kaspi_product=None, base_url_arbuz="https://arbuz.kz",
                   base_url_klever="https://klever.kz", base_url_kaspi="https://kaspi.kz"):
    arbuz_text = ""
    klever_text = ""
    kaspi_text = ""  # –¢–µ–∫—Å—Ç –¥–ª—è "–ö–∞—Å–ø–∏–π"
    image_url = None

    if arbuz_product:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ê—Ä–±—É–∑–∞
        arbuz_text = (
            f"–ê—Ä–±—É–∑:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {arbuz_product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–¶–µ–Ω–∞: {arbuz_product.get('price', '–¶–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {arbuz_product.get('category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {arbuz_product.get('parsed_time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°—Å—ã–ª–∫–∞: {base_url_arbuz + arbuz_product.get('link', '')}\n"
        )
        image_url = arbuz_product.get('image_url', None)
    else:
        arbuz_text = "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –ê—Ä–±—É–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"

    if klever_product:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ö–ª–µ–≤–µ—Ä–∞
        klever_text = (
            f"–ö–ª–µ–≤–µ—Ä:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {klever_product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–¶–µ–Ω–∞: {klever_product.get('price', '–¶–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {klever_product.get('category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {klever_product.get('parsed_time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°—Å—ã–ª–∫–∞: {klever_product.get('link', '')}\n"
        )
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–ª–µ–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ê—Ä–±—É–∑–∞
        image_url = image_url or klever_product.get('image_url', None)
    else:
        klever_text = "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –ö–ª–µ–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"

    if kaspi_product:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –ö–∞—Å–ø–∏–π
        kaspi_text = (
            f"–ö–∞—Å–ø–∏–π:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {kaspi_product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–¶–µ–Ω–∞: {kaspi_product.get('price', '–¶–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {kaspi_product.get('category', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {kaspi_product.get('parsed_time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°—Å—ã–ª–∫–∞: {kaspi_product.get('product_url', '')}\n"
        )
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ö–∞—Å–ø–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        image_url = image_url or kaspi_product.get('image_url', None)
    else:
        kaspi_text = "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –ö–∞—Å–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"

    return arbuz_text, klever_text, kaspi_text, image_url


@router.callback_query_handler(lambda c: c.data.startswith('page:'), state='*')
async def handle_page_change(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    page_number = int(callback_query.data.split(':')[1])

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await show_products(callback_query.message, state, page=page_number)


@router.message_handler(state=ProductSearch.waiting_for_search_query)
async def process_search_query(message: types.Message, state: FSMContext):
    search_query = message.text.strip()
    if not search_query:
        await message.answer("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        return

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –ê—Ä–±—É–∑ –∏ –ö–ª–µ–≤–µ—Ä
    arbuz_products = await arbuz_collection.find({'$text': {'$search': search_query}}).to_list(length=100)
    klever_products = await klever_collection.find({'$text': {'$search': search_query}}).to_list(length=100)
    kaspi_products = await kaspi_collection.find({'$text': {'$search': search_query}}).to_list(length=100)

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
    matched_products = await find_matching_products(arbuz_products, klever_products, kaspi_products)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    if not matched_products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.finish()
        return

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
    # (–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
    arbuz_product, klever_product, kaspi_product = matched_products[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ format_message, —á—Ç–æ–±—ã –æ–Ω —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–ª —Ç—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
    arbuz_text, klever_text, kaspi_text, image_url = format_message(arbuz_product, klever_product, kaspi_product)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—é—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    text = f"{arbuz_text}\n{klever_text}\n{kaspi_text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if image_url:
        await message.answer_photo(photo=image_url, caption=text)
    else:
        await message.answer(text)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if len(matched_products) > 1:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        pagination_markup = InlineKeyboardMarkup()
        pagination_markup.add(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä", callback_data='next_product:1'))
        await message.answer("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É:", reply_markup=pagination_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(matched_products=matched_products, current_page=0)


@router.callback_query_handler(lambda c: c.data == 'back_to_categories', state='*')
async def handle_back_to_categories(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cmd_start(callback_query.message, state)


@router.callback_query_handler(lambda c: c.data == 'search_by_name', state='*')
async def prompt_search_query(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await ProductSearch.waiting_for_search_query.set()
    await callback_query.answer()
