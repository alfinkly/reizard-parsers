from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineQuery, InlineKeyboardMarkup, InlineKeyboardButton, \
    InlineQueryResultArticle, InputTextMessageContent

from database.database import ORM
from database.models import GeneralCategory, Category, Product
from tgbot.keyboards.callbacks import CategoryCallback

router = Router()


@router.callback_query(CategoryCallback.filter())
async def process_category_selection(callback: CallbackQuery, callback_data: CategoryCallback, orm: ORM):
    g_categories: GeneralCategory = await orm.general_category_repo.select_by_id(callback_data.id)
    message_text = f"–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{g_categories.name}':"
    for c in g_categories.categories:
        c: Category
        message_text += f"<b>\n\n{c.name}:'\n'</b>"
        message_text += "\n".join([c.products[i].name for i in range(len(c.products[0:10]))])
        if len(c.products) > 10:
            message_text += f"\n–µ—â–µ {len(c.products) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤..."

    await callback.bot.send_message(callback.from_user.id, message_text, parse_mode=ParseMode.HTML)
    await callback.answer()


async def show_products(message: Message, state: FSMContext, page: int = 0):
    data = await state.get_data()
    matched_products = data.get('matched_products', [])
    page_cache = data.get('page_cache', {})
    sent_products = data.get('sent_products', set())
    last_message_ids = data.get('last_message_ids', [])

    items_per_page = 5
    total_pages = (len(matched_products) + items_per_page - 1) // items_per_page

    if page in page_cache:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫—ç—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_products = page_cache[page]
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –Ω–µ–π
        start_index = page * items_per_page
        end_index = start_index + items_per_page
        page_products = []
        for prod in matched_products[start_index:end_index]:
            arbuz_id = prod[0]['_id'] if prod[0] else None
            klever_id = prod[1]['_id'] if prod[1] else None
            kaspi_id = prod[2]['_id'] if len(prod) > 2 and prod[2] else None

            if not any(pid in sent_products for pid in [arbuz_id, klever_id, kaspi_id]):
                page_products.append(prod)
                if arbuz_id: sent_products.add(arbuz_id)
                if klever_id: sent_products.add(klever_id)
                if kaspi_id: sent_products.add(kaspi_id)

        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_cache[page] = page_products

    if not page_products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞.")
        return

    for product_pair in page_products:
        arbuz_product, klever_product, kaspi_product = product_pair if len(product_pair) > 2 else (
            product_pair[0], product_pair[1], None)
        arbuz_text, klever_text, kaspi_text, image_url = format_message(arbuz_product, klever_product,
                                                                        kaspi_product)  # –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é format_message
        text = arbuz_text + "\n" + klever_text + "\n" + kaspi_text  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è "–ö–∞—Å–ø–∏–π"

        markup = InlineKeyboardMarkup(row_width=2)
        if arbuz_product and klever_product:
            product_id = arbuz_product.get('_id', klever_product.get('_id', 'unknown'))
            markup.add(
                InlineKeyboardButton("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", callback_data=f"match:{product_id}"),
                InlineKeyboardButton("–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç", callback_data=f"nomatch:{product_id}")
            )

        try:
            if image_url and image_url.startswith('http'):
                sent_message = await message.bot.send_photo(chat_id=message.chat.id, photo=image_url, caption=text,
                                                            reply_markup=markup)
            else:
                raise ValueError("Invalid image URL")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            sent_message = await message.answer(text, reply_markup=markup)

        # –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        if arbuz_product:
            sent_products.add(arbuz_product['_id'])
        if klever_product:
            sent_products.add(klever_product['_id'])

        last_message_ids.append(sent_message.message_id)

    await state.update_data(page_cache=page_cache, sent_products=sent_products, last_message_ids=last_message_ids)

    navigation_markup = InlineKeyboardMarkup(row_width=2)
    if page > 0:
        navigation_markup.insert(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if page + 1 < total_pages:
        navigation_markup.insert(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"page:{page + 1}"))

    navigation_markup.insert(InlineKeyboardButton("üîç –ò–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫", switch_inline_query_current_chat=""))

    navigation_message = await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫:",
                                              reply_markup=navigation_markup)
    last_message_ids.append(navigation_message.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
    await state.update_data(page_cache=page_cache, sent_products=sent_products, last_message_ids=last_message_ids)


@router.inline_query()
async def inline_query_handler(inline_query: InlineQuery, orm: ORM):
    query = inline_query.query.strip()
    results = []

    if query:
        products: list[Product] = await orm.product_repo.search_by_name(query)

        for product in products:
            photo_url = product.image_url
            title = product.name
            price = product.price

            markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=product.link)]])

            results.append(
                InlineQueryResultArticle(
                    id=str(product.id),
                    title=title,
                    input_message_content=InputTextMessageContent(
                        message_text=f"<b>{title}</b>\n–¶–µ–Ω–∞: {price}\n<a href='{product.link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>",
                        parse_mode=ParseMode.HTML
                    ),
                    reply_markup=markup,
                    thumb_url=photo_url,
                    description=f"–¶–µ–Ω–∞: {price}"
                )
            )
    results = results[:20]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await inline_query.answer(results=results, cache_time=3)
